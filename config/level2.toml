# Level 2

# | Evaluation Scenario | Randomized Inertial Properties | Randomized Obstacles, Gates | Randomized Tracks | Notes                 |
# | :-----------------: | :----------------------------: | :-------------------------: | :---------------: | :-------------------: |
# | `level2.toml`       | *Yes*                          | *Yes*                       | *No*              | Learning, re-planning |
[controller]
file = "state_controller.py" # Put your controller file name here. Specifying a controller as argument to scripts will override this setting. Controllers are located in `lsy_drone_racing/control/`

[deploy]
### Settings only relevant for deployment
# Whether to check if gate and obstacle positions observed by vicon are within the limits defined down below.
check_race_track = true
# Whether to check if the drone start position is within the limits specified down below.
check_drone_start_pos = true
# Lets you practice your controller without putting up gates & obstacles, assumes nominal positions given below.
real_track_objects = true

[[deploy.drones]]
id = 52
channel = 80
drone_model = "cf21B_500"                        # Model of the drone, i.e., cf2x_L250, cf2x_P250, cf2x_T500, cf21B_500. For this course, we use cf21B_500


[sim]
# Physics options:
# "first_principles": first_principles (physics based) model
# "so_rpy": Simplified identified model.
# "so_rpy_rotor": Simplified identified model with rotor dynamics.
# "so_rpy_rotor_drag": Simplified identified model with rotor dynamics and drag.
physics = "first_principles"
drone_model = "cf21B_500"                        # Model of the drone, i.e., cf2x_L250, cf2x_P250, cf2x_T500, cf21B_500. For this course, we use cf21B_500
camera_view = [5.0, 180.0, -25.0, 0.0, 0.0, 0.0] # Camera view [distance, azimuth, elevation, lookat_x, lookat_y, lookat_z]
freq = 500                                        # Simulation frequency, in Hz
attitude_freq = 500                               # Controller frequency, in Hz. This frequency is used to simulate the onboard controller, NOT for the environment's step function
render = false                                       # Enable/disable PyBullet's GUI


[env]
id = "DroneRacing-v0"   # "DroneRacing-v0" for single races, "MultiDroneRacing-v0" for multi-drone races. Each environment also implements a vector-environment for faster training
seed = "random"         # Either "random" for a random behavior or an integer for reproducibility
freq = 50               # Frequency of the environment's step function, in Hz
sensor_range = 0.7      # Range at which the exact location of gates and obstacles become visible to the drone. Objects that are not in the drone's sensor range report their nominal position.
control_mode = "state"  # Control mode of the environment. Can be either "state" or "attitude"

[env.track]
# Full track radomization. When activated, the position (x & y) and orientation (yaw) 
# of the below given gates, obstacles and drones is randomized inside the safety limits. 
# Note: The order and therefore also height is not randomized!
randomize = false

# Tall gates: 1.195m height. Short gates: 0.695m height. Height is measured from the ground to the center of the gate.
[[env.track.gates]]
pos = [0.5 , 0.25, 0.7]
rpy = [0.0, 0.0, -0.78]
[[env.track.gates]]
pos = [1.05, 0.75, 1.2]
rpy = [0.0, 0.0, 2.35]
[[env.track.gates]]
pos = [-1.0, -0.25, 0.7]
rpy = [0.0, 0.0, 3.14]
[[env.track.gates]]
pos = [0.0, -0.75, 1.2]
rpy = [0.0, 0.0, 0.0]

# Obstacle height: 1.52m + reflective marker on top. Height is measured from the ground to the top of the obstacle.
[[env.track.obstacles]]
pos = [0.0, 0.75, 1.55]
[[env.track.obstacles]]
pos = [1.0, 0.25, 1.55]
[[env.track.obstacles]]
pos = [-1.5, -0.25, 1.55]
[[env.track.obstacles]]
pos = [-0.5, -0.75, 1.55]

[[env.track.drones]]
pos = [-1.5, 0.75, 0.01]
rpy = [0.0, 0.0, 0.0]
vel = [0, 0, 0]
ang_vel = [0, 0, 0]

# If the drones exceed those bounds in real, the run will be stopped and the drone will safely be returned to the starting position
[env.track.safety_limits]
pos_limit_low = [-2.5, -1.5, -1e-3]
pos_limit_high = [2.5, 1.5, 2.0]

[env.disturbances.action]
fn = "normal"
scale = 0.001

[env.disturbances.dynamics]
fn = "uniform"
[env.disturbances.dynamics.kwargs]
minval = [-0.1, -0.1, -0.1]
maxval = [0.1, 0.1, 0.1]

[env.randomizations.drone_pos]
fn = "uniform"
[env.randomizations.drone_pos.kwargs]
minval = [-0.1, -0.1, 0.0]
maxval = [0.1, 0.1, 0.02]

[env.randomizations.drone_rpy]
fn = "uniform"
[env.randomizations.drone_rpy.kwargs]
minval = [-0.1, -0.1, -0.1]
maxval = [0.1, 0.1, 0.1]

[env.randomizations.drone_mass]
fn = "uniform"
[env.randomizations.drone_mass.kwargs]
minval = -0.005
maxval = 0.005

[env.randomizations.drone_inertia]
fn = "uniform"
[env.randomizations.drone_inertia.kwargs]
minval = [-0.000001, -0.000001, -0.000001]
maxval = [0.000001, 0.000001, 0.000001]

[env.randomizations.gate_pos]
fn = "uniform"
[env.randomizations.gate_pos.kwargs]
minval = [-0.15, -0.15, -0.1]
maxval = [0.15, 0.15, 0.1]

[env.randomizations.gate_rpy]
fn = "uniform"
[env.randomizations.gate_rpy.kwargs]
minval = [-0.05, -0.1, -0.2]
maxval = [0.05, 0.1, 0.2]

[env.randomizations.obstacle_pos]
fn = "uniform"
[env.randomizations.obstacle_pos.kwargs]
minval = [-0.15, -0.15, -0.05]
maxval = [0.15, 0.15, 0.05]
